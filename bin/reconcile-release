#!/usr/bin/env node
const chalk = require('chalk');
const inquirer = require('inquirer');
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Skip commitizen for all commits happening within this script.
process.env.HUSKY_SKIP_HOOKS = 1;

const blahblahblah = 'test';

const releaseBranches = execSync('git branch --all')
  .toString('utf8')
  .split('\n  ')
  .filter((branch) => (
    branch.indexOf('release') === 0 ||
    branch.indexOf('remotes/origin/release') === 0
  ))
  .map((branch) => (
    branch
      .replace('remotes/origin/', '')
      .replace('*', '')
      .trim()
  ))
  .concat('release-merge-test')
  .reverse();

const reconcile = async () => {
  const { releaseBranch } = await inquirer.prompt([
    {
      type: 'list',
      choices: releaseBranches,
      name: 'releaseBranch',
      message: 'Welcome to the Irving release wizard! Which release branch would you like to merge?'
    },
  ]);

  execSync(`git checkout ${releaseBranch}`);
  execSync('git checkout release-merge');

  // Attempt merge.
  let hasConflict = false;

  try {
    execSync(`git merge ${releaseBranch}`).toString('utf8');
  } catch (e) {
    const gitMessage = e.stdout.toString('utf8');
    hasConflict = gitMessage.includes('Automatic merge failed');

    if (hasConflict) {
      // Prompt release coordinator to check for mismatched package.json dependencies.
      const { mismatchedDeps = false } = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'mismatchedDeps',
          message: `${chalk.red('Merge conflict encountered.')} Have any dependencies been installed in the release branch that have not been merged into main?`,
        },
      ]) || {};

      if (mismatchedDeps) {
        await inquirer.prompt([
          {
            type: 'confirm',
            name: 'packageMergeComplete',
            message: `Please manually resolve conflicts in package.json files with mismatched dependencies before continuing.
  Use "y" or the enter key to continue once manual resolution is complete.`,
          },
        ]);
      }

      // Auto-resolve conflicts in package.json, package-lock, lerna.json, and package changelogs.
      execSync('git ls-tree -r --name-only main | grep -E ".*((package|package-lock|lerna)\\.json|\/CHANGELOG.md)$" | xargs git checkout --ours --');
      await inquirer.prompt([
        {
          type: 'confirm',
          name: 'changelogMergeComplete',
          message: `Unfortunately, the root CHANGELOG.md file cannot be automatically merged.
Please manually resolve conflicts in this file and continue when finished. Keep in mind:
- every changelog heading should have release notes, even if it's just "**Note:** Version bump only for package irving"
- depending on how far your release branch and the main branch have diverged, there may be duplicate changelog entries. Verify this is not the case before completing your merge.`,
        },
      ]);
    } else {
      console.error(chalk.red('Something unexpected went wrong when attempting to merge your release branch, please try again or merge manually.'));
    }
  }

  // Bump release
  console.log(chalk.green('Bumping main branch to next version...'));
  // execSync('npm run release:bump');

  // Generate commit roundup.
  const { releaseVersion } = await inquirer.prompt([
    {
      type: 'input',
      name: 'releaseVersion',
      message: 'What is the latest release version on your release branch?',
    }
  ]);
  console.log(chalk.green(`Creating commit roundup for ${releaseVersion}`));
  const changelog = fs.readFileSync(
    path.join(__dirname, '../CHANGELOG.md'),
    'utf8'
  );
  const regexp = new RegExp(`(#\\s\\[${releaseVersion}[.\\d\\-]+((alpha|beta|rc)[.\\d]+)?\\]\\([^)]*\\)\\s\\([0-9\-]+\\))(?![\\r\\n]+\\*\\*Note:\\*\\*)[\\s\\S]+?(?=\\n#\\s)`, 'g');
  const entries = changelog.match(regexp);
  const entriesCleaned = entries
    .map((entry) => (
      entry
        // replace empty newlines.
        .replace(/\n(?=\n)/g, '')
        // change heading hierarchy to work better with GH release.
        .replace('### ', '#### ')
        .replace('# [', '### [')
    )).join('');

    console.log(chalk.magentaBright('Commit roundup generated'));
    console.log(entriesCleaned);
}

reconcile();
