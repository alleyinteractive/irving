#!/usr/bin/env node
const chalk = require('chalk');
const inquirer = require('inquirer');
const { execSync } = require('child_process');

const hello = 'test';

const releaseBranches = execSync('git branch --all')
  .toString('utf8')
  .split('\n  ')
  .filter((branch) => (
    branch.indexOf('release') === 0 ||
    branch.indexOf('remotes/origin/release') === 0
  ))
  .map((branch) => (
    branch
      .replace('remotes/origin/', '')
      .replace('*', '')
      .trim()
  ))
  .concat('release-merge-test')
  .reverse();

inquirer
  .prompt([
    {
      type: 'list',
      choices: releaseBranches,
      name: 'releaseBranch',
      message: 'Welcome to the Irving release wizard! Which release branch would you like to merge?'
    },
  ])
  .then(({ releaseBranch }) => {
    execSync(`git checkout ${releaseBranch}`);
    execSync('git checkout release-merge');

    try {
      execSync(`git merge ${releaseBranch}`).toString('utf8');
    } catch (e) {
      const gitMessage = e.stdout.toString('utf8');

      if (gitMessage.includes('Automatic merge failed')) {
        return inquirer.prompt([
          {
            type: 'confirm',
            name: 'mismatchedDeps',
            message: `${chalk.red('Merge conflict encountered.')} Have any dependencies been installed in the release branch that have not been merged into main?`,
          },
        ]);
      } else {
        console.log(chalk.red('An unknown error ocurred, try again', e.message));
      }
    }
  })
  .then(({ mismatchedDeps }) => {
    if (mismatchedDeps) {
      return inquirer.prompt([
        {
          type: 'confirm',
          name: 'continueMerge',
          message: `Please manually resolve conflicts in package.json files with mismatched dependencies before continuing.
Use "y" or the enter key to continue once manual resolution is complete.`,
        },
      ]);
    } else {
      execSync('git ls-tree -r --name-only main | grep -E ".*((package|package-lock|lerna)\\.json|\/CHANGELOG.md)$" | xargs git checkout --ours --');

    }
  });
